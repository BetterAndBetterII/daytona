# Daytona .env 示例（用于本地/compose 部署）

# ===========================
# 基础应用配置
# ===========================
# 应用运行环境 (development/production)
NODE_ENV=production

# API 服务端口
PORT=3000

# 应用访问地址
APP_URL=http://localhost:3001

# Dashboard 前端地址
DASHBOARD_URL=http://localhost:8080

# Dashboard Nginx 端口
NGINX_PORT=8080

# Dashboard API 地址（构建时注入）
VITE_API_URL=http://localhost:3001

# 环境标识 (local/staging/production)
ENVIRONMENT=local

# 是否跳过连接检查 (true/false)
SKIP_CONNECTIONS=false

# 是否启用维护模式
MAINTENANCE_MODE=false

# 时区设置 (用于定时任务)
CRON_TIMEZONE=UTC

# 最大自动归档间隔（分钟）
MAX_AUTO_ARCHIVE_INTERVAL=43200

# 单个 Runner 最大并发归档数
MAX_CONCURRENT_ARCHIVES_PER_RUNNER=6

# ===========================
# 数据库配置 - PostgreSQL
# 与 docker-compose.yml 保持一致
# ===========================
# 数据库主机
DB_HOST=db

# 数据库端口
DB_PORT=5432

# PostgreSQL 用户名 (与 db 服务保持一致)
POSTGRES_USER=user

# PostgreSQL 密码 (与 db 服务保持一致，生产环境请修改)
POSTGRES_PASSWORD=daytona_db_pass_123

# PostgreSQL 数据库名 (与 db 服务保持一致)
POSTGRES_DB=application_ctx

# ===========================
# 缓存配置 - Redis
# ===========================
# Redis 主机
REDIS_HOST=redis

# Redis 端口
REDIS_PORT=6379

# 是否启用 TLS (true/false)
REDIS_TLS=false

# ===========================
# 认证配置 - OIDC
# API 服务认证，生产环境需配置
# ===========================
# OIDC 客户端 ID
OIDC_CLIENT_ID=daytona-api-client

# OIDC 发行者 URL (留空则禁用OIDC)
OIDC_ISSUER_BASE_URL=

# OIDC 受众
OIDC_AUDIENCE=daytona-audience

# 是否启用管理 API
OIDC_MANAGEMENT_API_ENABLED=false

# 管理 API 客户端 ID
OIDC_MANAGEMENT_API_CLIENT_ID=

# 管理 API 客户端密钥
OIDC_MANAGEMENT_API_CLIENT_SECRET=

# 管理 API 受众
OIDC_MANAGEMENT_API_AUDIENCE=

# ===========================
# 邮件服务配置 - SMTP（可选）
# ===========================
# SMTP 服务器地址
SMTP_HOST=

# SMTP 端口
SMTP_PORT=587

# SMTP 用户名
SMTP_USER=

# SMTP 密码
SMTP_PASSWORD=

# 是否启用 SSL/TLS
SMTP_SECURE=false

# 发件人邮箱地址
SMTP_EMAIL_FROM=noreply@mail.daytona.io

# ===========================
# 对象存储配置 - MinIO/S3（使用本地MinIO服务）
# ===========================
# S3 兼容端点
S3_ENDPOINT=http://minio:9000

# S3 STS 端点
S3_STS_ENDPOINT=http://minio:9000

# S3 区域
S3_REGION=us-east-1

# S3 访问密钥
S3_ACCESS_KEY=minioadmin

# S3 秘密密钥
S3_SECRET_KEY=minioadmin

# S3 默认存储桶
S3_DEFAULT_BUCKET=daytona-bucket

# S3 账户 ID
S3_ACCOUNT_ID=

# S3 角色名称
S3_ROLE_NAME=

# ===========================
# 镜像注册表配置（可选）
# ===========================
# 临时注册表 URL
TRANSIENT_REGISTRY_URL=

# 临时注册表管理员用户
TRANSIENT_REGISTRY_ADMIN=

# 临时注册表管理员密码
TRANSIENT_REGISTRY_PASSWORD=

# 临时注册表项目 ID
TRANSIENT_REGISTRY_PROJECT_ID=

# 内部注册表 URL
INTERNAL_REGISTRY_URL=

# 内部注册表管理员用户
INTERNAL_REGISTRY_ADMIN=

# 内部注册表管理员密码
INTERNAL_REGISTRY_PASSWORD=

# 内部注册表项目 ID
INTERNAL_REGISTRY_PROJECT_ID=

# ===========================
# 代理服务配置（必需 - proxy 服务启动需要）
# ===========================
# 代理服务端口
PROXY_PORT=4000

# 代理服务域名
PROXY_DOMAIN=localhost

# 代理协议 (http/https)
PROXY_PROTOCOL=http

# 代理 API 密钥 (生产环境请修改)
PROXY_API_KEY=daytona_proxy_key_123

# Daytona API 地址（代理服务使用）
DAYTONA_API_URL=http://api:3000

# 代理服务的 OIDC 配置（与 API 的 OIDC 不同命名）
OIDC_CLIENT_ID=dev-client

# OIDC 客户端密钥
OIDC_CLIENT_SECRET=dev-secret

# OIDC 域名
OIDC_DOMAIN=http://dex:5556

# OIDC 受众
OIDC_AUDIENCE=dev-aud

# ===========================
# Runner 服务配置（必需 - runner 服务启动需要）
# ===========================
# Runner API 认证令牌 (生产环境请修改)
API_TOKEN=daytona_api_token_123

# Runner API 端口
API_PORT=8080

# 容器运行时 (docker/containerd)
CONTAINER_RUNTIME=docker

# 容器网络名称
CONTAINER_NETWORK=

# 日志文件路径
LOG_FILE_PATH=

# AWS 区域
AWS_REGION=

# AWS 端点 URL
AWS_ENDPOINT_URL=

# AWS 访问密钥 ID
AWS_ACCESS_KEY_ID=

# AWS 秘密访问密钥
AWS_SECRET_ACCESS_KEY=

# AWS 默认存储桶
AWS_DEFAULT_BUCKET=

# ===========================
# HTTPS 配置（API 服务可选）
# 启用 TLS 加密
# ===========================
# TLS 证书文件路径
CERT_PATH=

# TLS 私钥文件路径
CERT_KEY_PATH=

# ===========================
# 默认快照配置（可选）
# ===========================
# 默认快照名称或 ID
DEFAULT_SNAPSHOT=

# ===========================
# 审计日志配置（可选）
# ===========================
# 是否启用工具箱请求审计
AUDIT_TOOLBOX_REQUESTS_ENABLED=false

# 审计日志保留天数（留空表示永久保留）
AUDIT_LOG_RETENTION_DAYS=

# 是否启用控制台日志
AUDIT_CONSOLE_LOG_ENABLED=true

# ===========================
# 第三方服务配置（可选）
# ===========================
# PostHog 分析 API 密钥
POSTHOG_API_KEY=

# PostHog 主机地址
POSTHOG_HOST=

# ===========================
# 开发/调试配置（可选）
# ===========================
# 日志级别 (error/warn/info/debug)
LOG_LEVEL=info

# 是否启用调试模式
DEBUG=false

# ===========================
# MinIO 配置（用于对象存储）
# ===========================
# MinIO 根用户 (生产环境请修改)
MINIO_ROOT_USER=minioadmin

# MinIO 根密码 (生产环境请修改)
MINIO_ROOT_PASSWORD=daytona_minio_pass_123

# ===========================
# 使用说明
# ===========================
# 1. 复制此文件为 .env: cp .env.example .env
# 2. 根据实际环境修改配置值
# 3. 生产环境请务必修改所有默认密码
# 4. 敏感信息请妥善保管
# 5. 使用 docker-compose --env-file .env up -d 启动服务

# ===========================
# 环境文件说明
# ===========================
# .env          - 主环境配置文件（必需）
# .env.local    - 本地环境覆盖文件（可选，用于本地开发覆盖）
# .env.production - 生产环境特定配置（可选）
# 
# 注意：proxy服务会依次尝试加载 .env, .env.local, .env.production 文件
# 如需覆盖某些配置，可以创建 .env.local 文件

# ===========================
# 配置验证清单
# ===========================
# [ ] 数据库连接配置正确
# [ ] Redis 连接配置正确
# [ ] 认证服务配置完成（生产环境）
# [ ] 对象存储配置完成（如需要）
# [ ] 邮件服务配置完成（如需要）
# [ ] 所有密码已修改为强密码
# [ ] 端口配置无冲突
# [ ] 域名和地址配置正确

# ===========================
# 注意事项
# ===========================
# 1. 生产环境请勿使用默认密码
# 2. 确保所有服务端口不冲突
# 3. HTTPS 配置需要提供有效的证书文件
# 4. OIDC 配置需要与身份提供商协调
# 5. 对象存储配置需要确保网络连通性
# 6. 代理服务配置需要确保与 API 服务网络互通

# ===========================
# 使用说明
# ===========================
# 1. 复制此文件为 .env
# 2. 根据实际环境修改配置值
# 3. 生产环境请务必修改所有默认密码
# 4. 敏感信息请妥善保管
# 5. 使用 docker-compose --env-file .env up -d 启动服务

# ===========================
# 配置验证清单
# ===========================
# [ ] 数据库连接配置正确
# [ ] Redis 连接配置正确
# [ ] 认证服务配置完成（生产环境）
# [ ] 对象存储配置完成（如需要）
# [ ] 邮件服务配置完成（如需要）
# [ ] 所有密码已修改为强密码
# [ ] 端口配置无冲突
# [ ] 域名和地址配置正确

# ===========================
# 注意事项
# ===========================
# 1. 生产环境请勿使用默认密码
# 2. 确保所有服务端口不冲突
# 3. HTTPS 配置需要提供有效的证书文件
# 4. OIDC 配置需要与身份提供商协调
# 5. 对象存储配置需要确保网络连通性
# 6. 代理服务配置需要确保与 API 服务网络互通